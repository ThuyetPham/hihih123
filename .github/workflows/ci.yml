name: Mobile Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform: [android, ios]
        test-type: [smoke, regression]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Appium
      run: |
        npm install -g appium
        appium --version
        
    - name: Set up Android SDK (for Android tests)
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v0
      
    - name: Set up iOS Simulator (for iOS tests)
      if: matrix.platform == 'ios'
      run: |
        sudo xcode-select --switch /Applications/Xcode.app
        xcrun simctl list devices
        
    - name: Start Appium Server
      run: |
        appium --log appium.log &
        sleep 10
        
    - name: Run Smoke Tests
      if: matrix.test-type == 'smoke'
      run: |
        python scripts/run_tests.py --smoke --include "${{ matrix.platform }}"
        
    - name: Run Regression Tests
      if: matrix.test-type == 'regression'
      run: |
        python scripts/run_tests.py --regression --include "${{ matrix.platform }}"
        
    - name: Generate Allure Report
      run: |
        python scripts/run_tests.py --allure-generate
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.platform }}-${{ matrix.test-type }}
        path: |
          reports/
          logs/
          screenshots/
          
    - name: Upload Allure Report
      uses: actions/upload-artifact@v3
      with:
        name: allure-report-${{ matrix.platform }}-${{ matrix.test-type }}
        path: reports/allure-report/
        
  parallel-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Appium
      run: |
        npm install -g appium
        appium --version
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v0
      
    - name: Start Appium Server
      run: |
        appium --log appium.log &
        sleep 10
        
    - name: Run Parallel Tests
      run: |
        python scripts/run_tests.py --all --processes 4
        
    - name: Generate Allure Report
      run: |
        python scripts/run_tests.py --allure-generate
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: parallel-test-results
        path: |
          reports/
          logs/
          screenshots/
          
    - name: Upload Allure Report
      uses: actions/upload-artifact@v3
      with:
        name: parallel-allure-report
        path: reports/allure-report/
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        npm install -g audit-ci
        
    - name: Run Python security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run npm security audit
      run: |
        npm audit --audit-level moderate || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
        npm install -g eslint
        
    - name: Run Python linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
        mypy . --ignore-missing-imports
        
    - name: Run Robot Framework linting
      run: |
        robot --dryrun testcases/ || true
        
  deploy:
    needs: [test, parallel-tests, security-scan, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: parallel-test-results
        
    - name: Download Allure report
      uses: actions/download-artifact@v3
      with:
        name: parallel-allure-report
        
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        # Add deployment logic here
        
    - name: Notify team
      run: |
        echo "Notifying team about deployment..."
        # Add notification logic here 