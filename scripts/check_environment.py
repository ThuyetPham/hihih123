#!/usr/bin/env python3.10
# -*- coding: utf-8 -*-
"""
Script ki·ªÉm tra m√¥i tr∆∞·ªùng cho Mobile Automation
Ki·ªÉm tra c√°c dependencies v√† thi·∫øt b·ªã tr∆∞·ªõc khi ch·∫°y tests
"""

import os
import sys
import subprocess
import json
import yaml
from pathlib import Path

class EnvironmentChecker:
    """Class ki·ªÉm tra m√¥i tr∆∞·ªùng"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o EnvironmentChecker"""
        self.project_root = Path(__file__).parent.parent
        self.config_file = self.project_root / "config" / "config.yaml"
        
    def check_python_dependencies(self):
        """Ki·ªÉm tra Python dependencies"""
        print("üîç Ki·ªÉm tra Python dependencies...")
        
        try:
            import robot
            print("‚úÖ Robot Framework: OK")
        except ImportError:
            print("‚ùå Robot Framework: NOT INSTALLED")
            return False
            
        try:
            import yaml
            print("‚úÖ PyYAML: OK")
        except ImportError:
            print("‚ùå PyYAML: NOT INSTALLED")
            return False
            
        try:
            import requests
            print("‚úÖ Requests: OK")
        except ImportError:
            print("‚ùå Requests: NOT INSTALLED")
            return False
            
        try:
            import pandas
            print("‚úÖ Pandas: OK")
        except ImportError:
            print("‚ùå Pandas: NOT INSTALLED")
            return False
            
        return True
    
    def check_appium(self):
        """Ki·ªÉm tra Appium"""
        print("\nüîç Ki·ªÉm tra Appium...")
        
        try:
            result = subprocess.run(['appium', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"‚úÖ Appium: {version}")
                return True
            else:
                print("‚ùå Appium: NOT INSTALLED")
                return False
        except FileNotFoundError:
            print("‚ùå Appium: NOT FOUND")
            return False
    
    def check_android_sdk(self):
        """Ki·ªÉm tra Android SDK"""
        print("\nüîç Ki·ªÉm tra Android SDK...")
        
        try:
            result = subprocess.run(['adb', 'version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.split('\n')[0]
                print(f"‚úÖ ADB: {version}")
                return True
            else:
                print("‚ùå ADB: NOT INSTALLED")
                return False
        except FileNotFoundError:
            print("‚ùå ADB: NOT FOUND")
            return False
    
    def check_emulator(self):
        """Ki·ªÉm tra emulator"""
        print("\nüîç Ki·ªÉm tra Android Emulator...")
        
        try:
            result = subprocess.run(['emulator', '-list-avds'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                avds = result.stdout.strip().split('\n')
                if avds and avds[0]:
                    print("‚úÖ Android Emulator AVDs:")
                    for avd in avds:
                        if avd:
                            print(f"   - {avd}")
                    return True
                else:
                    print("‚ùå No Android Virtual Devices found")
                    return False
            else:
                print("‚ùå Emulator: NOT INSTALLED")
                return False
        except FileNotFoundError:
            print("‚ùå Emulator: NOT FOUND")
            return False
    
    def check_connected_devices(self):
        """Ki·ªÉm tra thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi"""
        print("\nüîç Ki·ªÉm tra thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi...")
        
        try:
            result = subprocess.run(['adb', 'devices'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        devices.append((device_id, status))
                
                if devices:
                    print("‚úÖ Connected devices:")
                    for device_id, status in devices:
                        print(f"   - {device_id} ({status})")
                    return True
                else:
                    print("‚ùå No devices connected")
                    return False
            else:
                print("‚ùå Cannot check devices")
                return False
        except FileNotFoundError:
            print("‚ùå ADB not found")
            return False
    
    def check_appium_server(self):
        """Ki·ªÉm tra Appium server"""
        print("\nüîç Ki·ªÉm tra Appium server...")
        
        try:
            import requests
            response = requests.get('http://127.0.0.1:4723/status', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Appium server: RUNNING")
                return True
            else:
                print("‚ùå Appium server: NOT RESPONDING")
                return False
        except requests.exceptions.RequestException:
            print("‚ùå Appium server: NOT RUNNING")
            return False
    
    def check_config_files(self):
        """Ki·ªÉm tra config files"""
        print("\nüîç Ki·ªÉm tra config files...")
        
        config_files = [
            "config/config.yaml",
            "config/variables.py",
            "requirements.txt",
            "robot.yaml"
        ]
        
        all_exist = True
        for file_path in config_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                print(f"‚úÖ {file_path}: EXISTS")
            else:
                print(f"‚ùå {file_path}: MISSING")
                all_exist = False
        
        return all_exist
    
    def check_test_files(self):
        """Ki·ªÉm tra test files"""
        print("\nüîç Ki·ªÉm tra test files...")
        
        test_files = [
            "testcases/LoginTest.robot",
            "testcases/SimpleTest.robot",
            "keywords/MobileKeywords.py",
            "keywords/LoginKeywords.py",
            "pageobjects/BasePage.py",
            "pageobjects/LoginPage.py"
        ]
        
        all_exist = True
        for file_path in test_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                print(f"‚úÖ {file_path}: EXISTS")
            else:
                print(f"‚ùå {file_path}: MISSING")
                all_exist = False
        
        return all_exist
    
    def start_emulator(self, avd_name):
        """Kh·ªüi ƒë·ªông emulator"""
        print(f"\nüöÄ Kh·ªüi ƒë·ªông emulator: {avd_name}")
        
        try:
            # Kh·ªüi ƒë·ªông emulator trong background
            subprocess.Popen(['emulator', '-avd', avd_name, '-no-snapshot-load'])
            print("‚úÖ Emulator ƒëang kh·ªüi ƒë·ªông...")
            print("‚è≥ Vui l√≤ng ch·ªù 30-60 gi√¢y ƒë·ªÉ emulator kh·ªüi ƒë·ªông ho√†n to√†n")
            return True
        except FileNotFoundError:
            print("‚ùå Emulator command not found")
            return False
    
    def start_appium_server(self):
        """Kh·ªüi ƒë·ªông Appium server"""
        print("\nüöÄ Kh·ªüi ƒë·ªông Appium server...")
        
        try:
            # Kh·ªüi ƒë·ªông Appium trong background
            subprocess.Popen(['appium', '--log', 'appium.log'])
            print("‚úÖ Appium server ƒëang kh·ªüi ƒë·ªông...")
            print("‚è≥ Vui l√≤ng ch·ªù 10-15 gi√¢y ƒë·ªÉ server kh·ªüi ƒë·ªông")
            return True
        except FileNotFoundError:
            print("‚ùå Appium command not found")
            return False
    
    def run_environment_check(self):
        """Ch·∫°y ki·ªÉm tra m√¥i tr∆∞·ªùng ƒë·∫ßy ƒë·ªß"""
        print("üîß Mobile Automation Environment Check")
        print("=" * 50)
        
        checks = [
            ("Python Dependencies", self.check_python_dependencies),
            ("Appium", self.check_appium),
            ("Android SDK", self.check_android_sdk),
            ("Emulator", self.check_emulator),
            ("Connected Devices", self.check_connected_devices),
            ("Config Files", self.check_config_files),
            ("Test Files", self.check_test_files)
        ]
        
        results = []
        for name, check_func in checks:
            try:
                result = check_func()
                results.append((name, result))
            except Exception as e:
                print(f"‚ùå Error checking {name}: {e}")
                results.append((name, False))
        
        # Summary
        print("\n" + "=" * 50)
        print("üìä SUMMARY")
        print("=" * 50)
        
        passed = sum(1 for _, result in results if result)
        total = len(results)
        
        for name, result in results:
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{name}: {status}")
        
        print(f"\nOverall: {passed}/{total} checks passed")
        
        if passed == total:
            print("üéâ Environment is ready for testing!")
            return True
        else:
            print("‚ö†Ô∏è  Some checks failed. Please fix the issues above.")
            return False
    
    def setup_environment(self):
        """Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng"""
        print("\nüîß Setting up environment...")
        
        # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
        directories = ['reports', 'logs', 'screenshots', 'videos', 'data', 'apps']
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(exist_ok=True)
            print(f"‚úÖ Created directory: {directory}")
        
        # C√†i ƒë·∫∑t dependencies
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                         check=True, capture_output=True)
            print("‚úÖ Dependencies installed")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to install dependencies: {e}")
            return False
        
        return True

def main():
    """Main function"""
    checker = EnvironmentChecker()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "check":
            checker.run_environment_check()
        elif command == "setup":
            checker.setup_environment()
        elif command == "start-emulator":
            if len(sys.argv) > 2:
                avd_name = sys.argv[2]
                checker.start_emulator(avd_name)
            else:
                print("Usage: python check_environment.py start-emulator <AVD_NAME>")
        elif command == "start-appium":
            checker.start_appium_server()
        else:
            print("Unknown command. Available commands: check, setup, start-emulator, start-appium")
    else:
        # Default: run full check
        checker.run_environment_check()

if __name__ == "__main__":
    main() 