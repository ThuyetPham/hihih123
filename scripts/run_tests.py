#!/usr/bin/env python3.10
# -*- coding: utf-8 -*-
"""
Script ch·∫°y tests cho Mobile Automation Project
Cung c·∫•p nhi·ªÅu t√πy ch·ªçn ƒë·ªÉ ch·∫°y tests
"""

import os
import sys
import argparse
import subprocess
import json
import yaml
from pathlib import Path
from datetime import datetime

class TestRunner:
    """Class ƒë·ªÉ ch·∫°y tests v·ªõi nhi·ªÅu t√πy ch·ªçn"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o TestRunner"""
        self.project_root = Path(__file__).parent.parent
        self.test_dir = self.project_root / "testcases"
        self.reports_dir = self.project_root / "reports"
        self.logs_dir = self.project_root / "logs"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        self.reports_dir.mkdir(exist_ok=True)
        self.logs_dir.mkdir(exist_ok=True)
    
    def run_tests(self, args):
        """
        Ch·∫°y tests v·ªõi c√°c tham s·ªë
        
        Args:
            args: Arguments t·ª´ command line
        """
        try:
            # X√¢y d·ª±ng command
            command = self._build_command(args)
            
            print(f"Ch·∫°y command: {' '.join(command)}")
            
            # Ch·∫°y command
            result = subprocess.run(command, capture_output=True, text=True)
            
            # In output
            if result.stdout:
                print("STDOUT:")
                print(result.stdout)
            
            if result.stderr:
                print("STDERR:")
                print(result.stderr)
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            if result.returncode == 0:
                print("‚úÖ Tests ch·∫°y th√†nh c√¥ng!")
            else:
                print("‚ùå Tests ch·∫°y th·∫•t b·∫°i!")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·∫°y tests: {e}")
            sys.exit(1)
    
    def _build_command(self, args):
        """
        X√¢y d·ª±ng command ƒë·ªÉ ch·∫°y tests
        
        Args:
            args: Arguments t·ª´ command line
            
        Returns:
            list: Command ƒë·ªÉ ch·∫°y
        """
        command = ["robot"]
        
        # Output directory
        command.extend(["--outputdir", str(self.reports_dir)])
        
        # Log v√† report files
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        command.extend([
            "--log", f"robot_log_{timestamp}.html",
            "--report", f"robot_report_{timestamp}.html",
            "--xunit", f"robot_xunit_{timestamp}.xml"
        ])
        
        # Include tags
        if args.include:
            command.extend(["--include", args.include])
        
        # Exclude tags
        if args.exclude:
            command.extend(["--exclude", args.exclude])
        
        # Processes (parallel)
        if args.processes:
            command.extend(["--processes", str(args.processes)])
        
        # Variables
        if args.variables:
            for var in args.variables:
                command.extend(["--variable", var])
        
        # Variable files
        if args.variablefiles:
            for varfile in args.variablefiles:
                command.extend(["--variablefile", varfile])
        
        # Listener
        if args.listener:
            command.extend(["--listener", args.listener])
        
        # Randomize
        if args.randomize:
            command.extend(["--randomize", args.randomize])
        
        # Dry run
        if args.dryrun:
            command.append("--dryrun")
        
        # Test files/directories
        if args.test_files:
            command.extend(args.test_files)
        else:
            command.append(str(self.test_dir))
        
        return command
    
    def run_smoke_tests(self):
        """Ch·∫°y smoke tests"""
        print("üî• Ch·∫°y Smoke Tests...")
        args = argparse.Namespace(
            include="smoke",
            exclude=None,
            processes=2,
            variables=[],
            variablefiles=[],
            listener=None,
            randomize=None,
            dryrun=False,
            test_files=[]
        )
        self.run_tests(args)
    
    def run_regression_tests(self):
        """Ch·∫°y regression tests"""
        print("üîÑ Ch·∫°y Regression Tests...")
        args = argparse.Namespace(
            include="regression",
            exclude=None,
            processes=4,
            variables=[],
            variablefiles=[],
            listener=None,
            randomize=None,
            dryrun=False,
            test_files=[]
        )
        self.run_tests(args)
    
    def run_all_tests(self):
        """Ch·∫°y t·∫•t c·∫£ tests"""
        print("üöÄ Ch·∫°y T·∫•t C·∫£ Tests...")
        args = argparse.Namespace(
            include=None,
            exclude=None,
            processes=4,
            variables=[],
            variablefiles=[],
            listener=None,
            randomize=None,
            dryrun=False,
            test_files=[]
        )
        self.run_tests(args)
    
    def run_specific_tests(self, test_files):
        """Ch·∫°y tests c·ª• th·ªÉ"""
        print(f"üéØ Ch·∫°y Tests C·ª• Th·ªÉ: {test_files}")
        args = argparse.Namespace(
            include=None,
            exclude=None,
            processes=2,
            variables=[],
            variablefiles=[],
            listener=None,
            randomize=None,
            dryrun=False,
            test_files=test_files
        )
        self.run_tests(args)
    
    def generate_allure_report(self):
        """T·∫°o Allure report"""
        try:
            print("üìä T·∫°o Allure Report...")
            
            allure_results_dir = self.reports_dir / "allure-results"
            allure_report_dir = self.reports_dir / "allure-report"
            
            # T·∫°o Allure report
            command = [
                "allure", "generate",
                str(allure_results_dir),
                "-o", str(allure_report_dir),
                "--clean"
            ]
            
            result = subprocess.run(command, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Allure report ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                print(f"üìÅ Report location: {allure_report_dir}")
            else:
                print("‚ùå L·ªói khi t·∫°o Allure report:")
                print(result.stderr)
                
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o Allure report: {e}")
    
    def open_allure_report(self):
        """M·ªü Allure report"""
        try:
            print("üåê M·ªü Allure Report...")
            
            allure_report_dir = self.reports_dir / "allure-report"
            
            if allure_report_dir.exists():
                command = ["allure", "open", str(allure_report_dir)]
                subprocess.Popen(command)
                print("‚úÖ Allure report ƒë√£ ƒë∆∞·ª£c m·ªü!")
            else:
                print("‚ùå Allure report ch∆∞a ƒë∆∞·ª£c t·∫°o. Ch·∫°y generate_allure_report() tr∆∞·ªõc.")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi m·ªü Allure report: {e}")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Mobile Automation Test Runner")
    
    # Test selection
    parser.add_argument("--smoke", action="store_true", help="Ch·∫°y smoke tests")
    parser.add_argument("--regression", action="store_true", help="Ch·∫°y regression tests")
    parser.add_argument("--all", action="store_true", help="Ch·∫°y t·∫•t c·∫£ tests")
    parser.add_argument("--files", nargs="+", help="Ch·∫°y tests c·ª• th·ªÉ")
    
    # Test configuration
    parser.add_argument("--include", help="Include tags")
    parser.add_argument("--exclude", help="Exclude tags")
    parser.add_argument("--processes", type=int, help="S·ªë processes ƒë·ªÉ ch·∫°y parallel")
    parser.add_argument("--variables", nargs="+", help="Variables")
    parser.add_argument("--variablefiles", nargs="+", help="Variable files")
    parser.add_argument("--listener", help="Listener")
    parser.add_argument("--randomize", help="Randomize tests")
    parser.add_argument("--dryrun", action="store_true", help="Dry run")
    
    # Report
    parser.add_argument("--allure-generate", action="store_true", help="T·∫°o Allure report")
    parser.add_argument("--allure-open", action="store_true", help="M·ªü Allure report")
    
    args = parser.parse_args()
    
    runner = TestRunner()
    
    # Ch·∫°y tests
    if args.smoke:
        runner.run_smoke_tests()
    elif args.regression:
        runner.run_regression_tests()
    elif args.all:
        runner.run_all_tests()
    elif args.files:
        runner.run_specific_tests(args.files)
    else:
        # Ch·∫°y v·ªõi arguments t√πy ch·ªânh
        runner.run_tests(args)
    
    # T·∫°o Allure report
    if args.allure_generate:
        runner.generate_allure_report()
    
    # M·ªü Allure report
    if args.allure_open:
        runner.open_allure_report()

if __name__ == "__main__":
    main() 